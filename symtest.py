
#!/usr/bin/env python

import I2of5_decode
import matplotlib.pyplot as plt
import random
import scipy
import time
import random
import math
import cmath


# getting pulse shape from rdms file

"""
from read_csv import *
data = read_csv ( '../../data/clean_data.csv')
data = [ float(x[0]) for x in data ]

pulse_shape = data[214475:214475+300]
pulse_shape = [ y-pulse_shape[0] for y in pulse_shape ]
#plt.plot( shape )

x1 = 218
y1 = pulse_shape[x1]
x2 = len(pulse_shape)-1
y2 = -pulse_shape[x2]

for x in range(len(pulse_shape)):
    if (x >= x1 ):
        pulse_shape[x] = pulse_shape[x] + (y2)*(float(x-x1)/(x2-x1))**2
"""


#plt.plot(shape)
#plt.show()

pulse_shape = [0.0, -0.10240799999999695, 0.30722200000000299, 0.81925999999999988, 1.1264820000000029, 1.2288890000000023, 2.1505569999999992, 4.6083360000000013, 6.45167, 9.0118569999999991, 12.391303999999998, 15.463528000000004, 21.505568999999994, 28.878906999999998, 38.197986, 50.179659999999998, 66.360040999999995, 88.684869000000006, 121.250445, 154.43046500000003, 173.27343999999999, 185.25511399999999, 194.98382400000003, 200.309012, 203.381236, 202.66438399999998, 198.36327, 192.83326699999998, 186.89363400000002, 178.90585099999998, 167.94825200000002, 155.45454000000001, 146.54509000000002, 144.80416300000002, 149.105277, 159.141209, 172.14695799999998, 186.381596, 200.92345699999998, 212.80272400000001, 223.24828600000001, 232.157736, 239.42866600000002, 245.470707, 250.28385800000001, 254.68737900000002, 256.22349100000002, 257.452381, 256.73552900000004, 255.30182400000001, 254.175342, 251.71756300000004, 249.362191, 247.00681900000001, 243.62737200000004, 239.121444, 234.92273700000004, 229.69995600000004, 223.55550800000003, 218.02550500000001, 211.77864900000003, 205.42938600000002, 196.72475100000003, 187.81530099999998, 176.96010899999999, 163.64713799999998, 147.67157200000003, 131.38878499999998, 114.79877399999999, 97.696726999999996, 81.618753999999996, 65.848003000000006, 50.384474999999995, 36.047428999999994, 23.144087999999996, 11.367229000000002, 1.7409269999999992, -6.3492630000000005, -13.517786000000001, -18.535751999999999, -23.246496, -26.625942999999999, -29.288536999999998, -30.824649000000001, -31.848723999999997, -33.180020999999996, -34.818539999999999, -35.637799999999999, -35.740206999999998, -36.969096999999998, -38.914839000000001, -40.041320999999996, -37.890763999999997, -33.692058000000003, -35.535392999999999, -39.426876, -40.246136, -41.577432999999999, -44.547249999999998, -46.390583999999997, -49.155586, -51.101327999999995, -53.456699999999998, -55.402442000000001, -57.143369, -58.167444000000003, -59.703555999999999, -60.727629999999998, -60.420407999999995, -59.703555999999999, -57.552999, -55.402442000000001, -53.251885000000001, -50.589291000000003, -47.517066999999997, -44.854472000000001, -42.089470999999996, -38.812432000000001, -36.149836999999998, -32.770390999999996, -30.312612000000001, -27.137979999999999, -21.300753999999998, -15.873158, -9.523894999999996, -5.0179660000000013, -1.4337049999999962, 0.61444500000000346, 0.40962999999999994, 0.20481500000000352, -0.92166699999999935, -1.3312969999999993, -2.2529649999999961, -1.8433349999999962, -1.1264819999999958, 0.10240699999999947, 2.5601869999999991, 6.8613, 11.469636999999999, 18.330936999999999, 23.656126, 27.547608999999994, 30.619833999999997, 32.463167999999996, 33.692058000000003, 34.511317000000005, 33.589650000000006, 32.872798000000003, 32.155946, 30.619833999999997, 29.186128999999994, 27.137979999999999, 24.577793, 22.324827999999997, 21.403160999999997, 20.993531000000004, 21.915199000000001, 23.553718000000003, 25.601866999999999, 29.698166000000001, 33.692058000000003, 37.890764000000004, 42.806323000000006, 46.902620999999996, 51.920586999999998, 57.348183000000006, 61.034852000000001, 65.028744000000003, 67.281707999999995, 66.052818000000002, 59.498739999999998, 49.155586, 38.300393999999997, 27.957239000000001, 18.228529999999999, 10.650376999999999, 8.7046350000000032, 8.6022269999999992, 6.5540780000000041, 2.7650020000000026, -2.7650019999999955, -9.4214869999999991, -15.873158, -21.403161999999998, -25.089831, -27.650016999999998, -29.902982000000002, -31.746316, -33.487242999999999, -36.252245000000002, -38.505209000000001, -40.143729, -41.167802999999999, -42.191878000000003, -42.499100999999996, -43.318359999999998, -43.727989999999998, -44.444842000000001, -45.366509999999998, -46.083362000000001, -46.595399, -47.824289, -48.541140999999996, -49.360400999999996, -50.077252999999999, -51.203735999999999, -51.920587999999995, -52.842255000000002, -53.354292000000001, -54.685589999999998, -55.197626999999997, -54.890403999999997, -55.812072000000001, -56.016886999999997, -56.324109, -56.938553999999996, -56.631331000000003, -57.552999, -57.450591000000003, -57.036902785855808, -56.512691143423254, -56.492400072702331, -55.849547573693037, -55.403393646395365, -55.051531290809322, -53.360254506934915, -51.865677294772134, -50.567797654320984, -48.749764585581467, -47.230838088553575, -45.089349163237316, -42.632521809632678, -40.269986027739677, -37.694518817558297, -34.496490179088553, -31.290344112330434, -27.666452617283948, -23.522407693949091, -19.370246342325864, -13.264225562414266, -7.252497354214297, -1.6422817177259557, 4.0784583470507538, 7.3495348401158331, 8.785393761469285, 9.5125161111111147, 9.3260878890413075, 8.1237010952598698, 7.6462837297668012, 4.9240187925621122, 2.8243142836457853, 0.52791120301783412, -1.862782449321748, -4.5525826733729575, -7.1318584691358007, -10.215055836610276, -12.982913775796373, -15.128210286694101, -17.367798369303461, -18.575195023624445, -19.672068249657066, -20.658417047401308, -21.227019416857186, -21.275468358024689, -21.213392870903824, -20.835978955494586, -20.75767161179698, -20.056801839811001, -19.552631639536656, -19.142752010973936, -18.622347954122851, -17.684198468983382, -17.352376555555551, -17.319661213839353, -15.230680443834782, -14.567287245541836, -13.486147618960524, -11.884854564090839, -11.606742080932786, -10.808475169486359, -10.104499829751564, -8.9827790617283938, -7.7505328654168615, -7.0222082408169477, -5.9785451879286704, -5.0291727067520213, -3.9692767972870016, -3.0036714595336065, -2.1323566934918468, -1.9697784991617127, -1.7990838765432109, -1.3130508256363349, -1.1261233464410942, -1.0334864389574747, -0.72791810318549466, -0.92627133912513315, -1.0141001467764106, -0.27455352613931083, -0.44855747721384276, 0.0]

random.seed(time.time()*50)

def add_noise_old(signal,amplitude=0.3):
    noise = [ random.uniform(-amplitude,amplitude) for i in range(len(signal)) ]
    signal += scipy.array(noise)


def add_noise( signal, shape, amplitude, count ):
    
    n = len(signal)
    noise = scipy.zeros(n)
    
    for l in range(count):
        
        A = random.uniform( -1.0, 1.0 )*amplitude
        
        pos = random.uniform( 0, n )
        
        for k in range(len(shape)):
            noise [ (k+pos)%n ] += A*shape[k]
    
    for k in range(n):
        signal[k] = signal[k] + noise[k]





narrow_test = pulse_shape
wide_test = []

for i in range(len(narrow_test)*2):
    wide_test.extend([0])

for i in range(len(narrow_test)-1):
    wide_test[i+len(narrow_test)/2] = narrow_test[i]




wide = []
narrow = []
narrow_length = 300

for i in range(narrow_length):
    narrow.extend([1])

for i in range((narrow_length)/2):
    wide.extend([0])

for i in range((narrow_length)):
    wide.extend([1])

for i in range((narrow_length)/2):
    wide.extend([0])
    

decoder = I2of5_decode.I2of5_decode()
decoder.load_shapes( narrow, wide )

decoder_test = I2of5_decode.I2of5_decode()
decoder_test.load_shapes( narrow_test, wide_test  )



def gauss( s ):
    return [  math.exp(-(x-0.5)**2/(2*( s )**2)) for x in [ 0.001*x for x in range(1000) ] ]


"""
plt.plot(noise_wave_a)
plt.plot(noise_wave_b)
plt.show()
"""

for i in range(100):
    
    i = int((random.uniform( 0, 1000 )*1000)%99)
    
    test_signal = decoder.signal_group[ i ]
    test_value = decoder_test.value_group[ i ]
    
    if True:
        X = [ (7.0*k)/len(decoder.signal_group[i]) for k in range(len(test_signal)) ]
        plt.plot(X, decoder.signal_group[i], X, test_signal )
        plt.show()
        raw_input("Press ENTER to continue...")
    
    if False:
        X = [ (7.0*k)/len(test_signal) for k in range(len(test_signal)) ]
        plt.plot(X, test_signal )
        plt.show()
        raw_input("Press ENTER to continue...")
        
    
    #add_noise( test_signal, gauss(0.15), 0.7, 10 )
    #add_noise( test_signal, gauss(0.05), 3, 30 )
    
    #add_noise( test_signal, noise_wave_a, .25, 50 )
    #add_noise( test_signal, noise_wave_b, .25, 1 )
    
    if True:
        plt.plot( test_signal )
        plt.show()
        raw_input("Press ENTER to continue...")
    
    results = decoder.decode( test_signal )
    
    print "test value: " , test_value, ", result: ", results[0], ", certainty: ", results[1]
    
    if True:
        plt.hist( results[3],  bins=100)
        plt.show()
        
        raw_input("Press ENTER to continue...")
    
    
    
    
    
    
    
    """
    distances = results[2]
    
    print "certainty:  ", results[1], "\t",( results[0], test_value ), "delta: \t", results[0] - test_value
    
    plt.plot(test_signal)
    plt.show()
    
    raw_input('Press Enter...')
    
    plt.hist(results[2], bins=20)
    plt.show()
    
    raw_input('Press Enter...')
    """
    
    
    


